# Copyright 2020 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Dex Is the OpenID Provider for Kubermatic.
dex:
  ingress:
    # configure your base domain, under which the Kubermatic dashboard shall be available
    host: student-01-kkp-admin-training.loodse.training

  clients:
  # The "kubermatic" client is used for logging into the Kubermatic dashboard. It always
  # needs to be configured.
  - id: kubermatic
    name: Kubermatic
    # Generate a secure secret key
    # Those can be generated on the shell using:
    # cat /dev/urandom | tr -dc A-Za-z0-9 | head -c32
    secret: klaNL3BOZCCPovyBgWJ0pA0IomzJq0hy
    RedirectURIs:
    # ensure the URLs below use the dex.ingress.host configured above
    - https://student-01-kkp-admin-training.loodse.training
    - https://student-01-kkp-admin-training.loodse.training/projects

  # The "kubermaticIssuer" client is used for providing OIDC access to User Clusters.
  # This configuration is optional, used if the "enableOIDCKubeconfig: true" option is used in KubermaticSetting.
  # More about this configuration at https://docs.kubermatic.com/kubermatic/master/tutorials_howtos/oidc_provider_configuration/share-_clusters_via_delegated_oidc_authentication/
  - id: kubermaticIssuer
    name: Kubermatic OIDC Issuer
    # Generate a secure secret key
    # Those can be generated on the shell using:
    # cat /dev/urandom | tr -dc A-Za-z0-9 | head -c32
    secret: fmSHfbxlO8LA3lgdSFE6xK88yuOnImvg
    RedirectURIs:
      # ensure the URLs below use the dex.ingress.host configured above
      - https://student-01-kkp-admin-training.loodse.training/api/v1/kubeconfig

  - id: grafana
    name: Grafana
    secret: aMtb0udzKQ49hojclfl2ak29QnSCjn9w
    RedirectURIs:
    - https://grafana.student-01-kkp-admin-training.loodse.training/oauth/callback      

  # Depending on your chosen login method, you need to configure either an OAuth provider like
  # Google or GitHub, or configure a set of static passwords. Check the `charts/oauth/values.yaml`
  # for an overview over all available connectors.

  # For testing purposes, we configure a single static user/password combination.
  staticPasswords:
  - email: hubert@kubermatic.com
    # bcrypt hash of the string "password", can be created using recent versions of htpasswd:
    # `htpasswd -bnBC 10 "" PASSWORD_HERE | tr -d ':\n' | sed 's/$2y/$2a/'`
    hash: "$2a$10$MQNief66SwS9ZKReohiBLeMj0PmrLVnsYZO/K345G5.ypnBeinhsu"

    # these are used within Kubermatic to identify the user
    username: admin
    userID: 08a8684b-db88-4b73-90a9-3cd1661f5466

  # the cert-manager Issuer (or ClusterIssuer) responsible for managing the certificates
  # If you want to deploy your own certificate without relying on cert-manager
  # uncomment the next line and remove subsequent certIssuer configuration.
  # certIssuer: null
  certIssuer:
    # For generating a certificate signed by a trusted root authority replace
    # with "letsencrypt-prod".
    name: letsencrypt-prod
    kind: ClusterIssuer

minio:
  storeSize: '10Gi'
  storageClass: kubermatic-backup
  credentials:
    accessKey: "reoshe9Eiwei2ku5foB6owiva2Sheeth"
    secretKey: "rooNgohsh4ohJo7aefoofeiTae4poht0cohxua5eithiexu7quieng5ailoosha8"
    
telemetry:
  # uuid is the unique identifier of the client where the agent is running.
  # This field is required and will print an error message when that entry is missing.
  # You can generate uuid using command uuidgen on your linux machine
  uuid: "57bc82e4-d5c8-4445-842b-84fa966d1901"

# MLA 

prometheus:
  host: prometheus.kubermatic.student-01-kkp-admin-training.loodse.training
  storageSize: '250Gi'
  tsdb:
    retentionTime: '30d'
  ruleFiles:
  - /etc/prometheus/rules/general-*.yaml
  - /etc/prometheus/rules/kubermatic-master-*.yaml
  - /etc/prometheus/rules/managed-*.yaml

alertmanager:
  host: alertmanager.kubermatic.student-01-kkp-admin-training.loodse.training

grafana:
  user: admin
  password: adm1n
  provisioning:
    datasources:
      prometheusServices:
        - prometheus
      lokiServices:
        - loki
    configuration:
      disable_login_form: false
      
iap:
  oidc_issuer_url: https://student-01-kkp-admin-training.loodse.training/dex
  deployments:
    grafana:
      name: grafana
      client_id: grafana
      client_secret: aMtb0udzKQ49hojclfl2ak29QnSCjn9w
      encryption_key: 0XnMY667C1kE2J06vk0MZt4V1dJJqI54
      config: ## see https://github.com/oauth2-proxy/oauth2-proxy/blob/master/docs/configuration/configuration.md
        scope: "groups openid email"
        email_domains:
          - '*'
        ## do not route health endpoint through the proxy
        skip_auth_regex:
          - '/api/health'
        ## auto-register users based on their email address
        ## Grafana is configured to look for the X-Forwarded-Email header
        pass_user_headers: true
      upstream_service: grafana.monitoring.svc.cluster.local
      upstream_port: 3000
      ingress:
        host: "grafana.student-01-kkp-admin-training.loodse.training"
        annotations: {}
  certIssuer:
    name: letsencrypt-prod
    kind: ClusterIssuer

      